{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/README.md","hash":"034155f3c0a9ac4a30bbdcfd549f151960f5ef8d","modified":1480832987000},{"_id":"themes/yelee/_config.yml","hash":"27f48eb4b5b209d26e0304953ebd840a2a63f1f7","modified":1480832987000},{"_id":"themes/yelee/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1480832987000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1480832987000},{"_id":"source/_posts/MyOpinionAboutHexo.md","hash":"b7e1bff009a543c6cec0a315d8837e789758a41e","modified":1480832987000},{"_id":"source/_posts/vcsOfIdea.md","hash":"62120d85e61d79fcf01f008b35ea17b2f0381901","modified":1480833767000},{"_id":"source/_posts/maven.md","hash":"0c1b8044d0e9b488da53d1d06ae3875c9e2ceb5a","modified":1480832987000},{"_id":"source/about/index.md","hash":"24647eea40de6957b25f136d771be290ce71b830","modified":1480832987000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1480832987000},{"_id":"source/tags/index.md","hash":"20b984bc0967917435852ccb877513af63ee68a0","modified":1480832987000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1480832987000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1480832987000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1480832987000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1480832987000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1480832987000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1480832987000},{"_id":"themes/yelee/layout/layout.ejs","hash":"ec6416c16cb1dec583522fbc988dab3163865b71","modified":1480832987000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1480832987000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480832987000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480832987000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1480832987000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"39e25495947bbb871620d48cd909d3ef5824229a","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"d781737389f408a5dd57a0f9430d2704b7fe192c","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"a439ebf7c4798ad3830e66ccf226a60b05ffea0a","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"2ea24319611a8fceeed4491c710920ab72b3e165","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"8ef930a8ed8b1a3d71b18cca02bc4963e310cf00","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"6ea8bacacc8370ccf5af4e6f66da3bc743b88342","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"252f3757edea31d55a7e5624e2214f268bf07283","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"48696ded8e57def05d7ea58e74730f49d66ea6b5","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"9e504a0ec060ac3c6622855734ebea6eca2b78e9","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"190efc2e8ee037387685ff7dd24ae6db8bc77c60","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/ribbon.ejs","hash":"483f4e4106aa920f804631820ca09ddae1093784","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"6da102cd4a05bc6b4807b937862a7332f6845e5f","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"a0c6362e0f0161bbb7e70d50a4d9e39f2ff8ca48","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1480832987000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1480832987000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1480832987000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"bca217a64e422ea7a4a1748b8fc980b408e8c836","modified":1480832987000},{"_id":"themes/yelee/source/css/style.styl","hash":"0a376f2ff895581deda4c8231bdac2253b2de03a","modified":1480832987000},{"_id":"themes/yelee/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1480832987000},{"_id":"themes/yelee/source/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1480832987000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1480832987000},{"_id":"themes/yelee/source/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1480832987000},{"_id":"themes/yelee/source/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1480832987000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1480832987000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1480832987000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1480832987000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1480832987000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1480832987000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1480832987000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1480832987000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1480832987000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1480832987000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1480832987000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1480832987000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1480832987000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1480832987000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1480832987000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1480832987000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1480832987000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1480832987000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1480832987000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1480832987000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1480832987000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1480832987000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"15c269b81046b22ee44d38d9a08fc66618318435","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"357a8de8a7ed8194efc16f55f97f7e2551b31bf9","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"593cdf0a9eca655c8a763f2d5fb22254d19b1252","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"60cb646f3bc22c46d6ff4b95bb36dad577ed76c0","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1480832987000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1480832987000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1480832987000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1480832987000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1480832987000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"416786f566582fe697a12bb03a9eb2d1c604e2c7","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"45d36a307c22a754ed87f3ae6441ba8616f7329c","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"384f9a9c017400b12f52ac33759380075e527998","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4dcf5d3e3435897de91b39473a93fb7c3ad73dde","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"d82129844528ae1a5c9547bc6d3f5bd37b0fb801","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"034eb9605e006a0d0098bd963e9cdc11a1eaf6c3","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"4681032f51fd0df6451051ba35efa1f9f745c302","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"d05287b44c64576b8560461bc6c3b7e8ceda5539","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/ribbon.styl","hash":"412305cf1926233910de5a3f8ca0f80fe3128079","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"24ff28457b5e1519a8b4561284f6159bdd827ad4","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"9d7847cc899970a19d288c9eec9f24691c053ef3","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1480832987000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1480832987000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"9b96dd1c51b43a1130b3bb6eedb293b77eef8b1d","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"816044b7680514626981e945ee6be943a5de60a7","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"2014a25ec300910b8a093ec8010f6703a2142021","modified":1480832987000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"365026a5a30bcc88bec1b46c391c7d3bce41f033","modified":1480832987000},{"_id":"public/about/index.html","hash":"bd38765ba4b567d1be63595bd307898a09c7c048","modified":1480834702114},{"_id":"public/tags/index.html","hash":"4bbe9a9a84b475403fa34b95848b5551724dfcfc","modified":1480834702259},{"_id":"public/2016/12/01/MyOpinionAboutHexo/index.html","hash":"f481a428fed7f03d682a7e66b5daf944267601a0","modified":1480834702263},{"_id":"public/2016/11/28/maven/index.html","hash":"edb2d7ecdcd4e5e9cb1c5bba69949d222e456d60","modified":1480834702263},{"_id":"public/2016/11/24/vcsOfIdea/index.html","hash":"c470e08c5407ae28386aef2bbde93822ac6e9765","modified":1480834702263},{"_id":"public/archives/2016/11/index.html","hash":"39aed522262388fba856e130da1fbf6de2e80f9d","modified":1480834702272},{"_id":"public/archives/2016/12/index.html","hash":"0e0b74030a78f79ed6163289e17c28491b9fee6f","modified":1480834702272},{"_id":"public/tags/Hexo/index.html","hash":"c6d21a797718886aac0ad6f82552cb820974ad08","modified":1480834702272},{"_id":"public/tags/blog/index.html","hash":"646df8c103d51b7b06b3f1882d3ba1bcc51897b6","modified":1480834702272},{"_id":"public/tags/Markdown/index.html","hash":"98f938822645532ca69215ea6eb52265d8045389","modified":1480834702272},{"_id":"public/tags/IDEA/index.html","hash":"a6cd665f64addf49ed673e4b7a51f01e72e3cad0","modified":1480834702272},{"_id":"public/tags/VCS/index.html","hash":"f4e9279fcc71ae501586424c7669c6788032dc9f","modified":1480834702272},{"_id":"public/tags/git/index.html","hash":"9b669ec09d04af534c22c4351ecf3d16b9b8881d","modified":1480834702272},{"_id":"public/tags/svn/index.html","hash":"303fd1a086578b65a8a470681dc4c988ac4e66e3","modified":1480834702272},{"_id":"public/tags/maven/index.html","hash":"a58cea8ce0428ad547d0425918ad7a3a2cc6124d","modified":1480834702272},{"_id":"public/tags/java/index.html","hash":"c845c0fa4bb91a0583ede38b451d7c91926097b2","modified":1480834702273},{"_id":"public/tags/jvm/index.html","hash":"e28ee4ff6adb2e9ea838ce34fa52958da20f59cf","modified":1480834702273},{"_id":"public/tags/pom/index.html","hash":"acd2b9c0c3f7152863ccec8b0881e566c6c47642","modified":1480834702273},{"_id":"public/archives/index.html","hash":"c35c3e5ba6acbe626aec69bb982f8f2aa6b64d0c","modified":1480834702273},{"_id":"public/archives/2016/index.html","hash":"61f677332bf9cc4cda86aef66bd9f8607dbf5de0","modified":1480834702273},{"_id":"public/index.html","hash":"7cbfe7b9c4bc01e0fb5146e0378a8b9ed1704980","modified":1480834702273},{"_id":"public/2016/12/04/hello-world/index.html","hash":"bec5901c6b20c27bb0388012db3f130153c6a4c6","modified":1480834702274},{"_id":"public/css/style.css","hash":"a689c54f59b5da32942bb29fdbf4aededeb89dc5","modified":1480834703692}],"Category":[],"Data":[],"Page":[{"title":"About me","date":"2016-12-01T03:47:09.000Z","_content":"\n# 哥是做什么的？\n\n* 哥是一个落魄码农\n* 哥还是做大数据的\n* 哥想学点东西，比如：java\n\n# 哥的联系方式\n\n* Email:\n    * Gmail: hepingtaodev@gmail.com\n    * QQ: hectorhe@qq.com\n* Github: https://github.com/hepingtao","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2016-12-01 11:47:09\n---\n\n# 哥是做什么的？\n\n* 哥是一个落魄码农\n* 哥还是做大数据的\n* 哥想学点东西，比如：java\n\n# 哥的联系方式\n\n* Email:\n    * Gmail: hepingtaodev@gmail.com\n    * QQ: hectorhe@qq.com\n* Github: https://github.com/hepingtao","updated":"2016-12-04T06:29:47.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciwaantwy0001ijnmat0nmxf6","content":"<h1 id=\"哥是做什么的？\"><a href=\"#哥是做什么的？\" class=\"headerlink\" title=\"哥是做什么的？\"></a>哥是做什么的？</h1><ul>\n<li>哥是一个落魄码农</li>\n<li>哥还是做大数据的</li>\n<li>哥想学点东西，比如：java</li>\n</ul>\n<h1 id=\"哥的联系方式\"><a href=\"#哥的联系方式\" class=\"headerlink\" title=\"哥的联系方式\"></a>哥的联系方式</h1><ul>\n<li>Email:<ul>\n<li>Gmail: hepingtaodev@gmail.com</li>\n<li>QQ: hectorhe@qq.com</li>\n</ul>\n</li>\n<li>Github: <a href=\"https://github.com/hepingtao\" target=\"_blank\" rel=\"external\">https://github.com/hepingtao</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"哥是做什么的？\"><a href=\"#哥是做什么的？\" class=\"headerlink\" title=\"哥是做什么的？\"></a>哥是做什么的？</h1><ul>\n<li>哥是一个落魄码农</li>\n<li>哥还是做大数据的</li>\n<li>哥想学点东西，比如：java</li>\n</ul>\n<h1 id=\"哥的联系方式\"><a href=\"#哥的联系方式\" class=\"headerlink\" title=\"哥的联系方式\"></a>哥的联系方式</h1><ul>\n<li>Email:<ul>\n<li>Gmail: hepingtaodev@gmail.com</li>\n<li>QQ: hectorhe@qq.com</li>\n</ul>\n</li>\n<li>Github: <a href=\"https://github.com/hepingtao\">https://github.com/hepingtao</a></li>\n</ul>\n"},{"title":"tags","date":"2016-12-01T06:54:14.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-01 14:54:14\n---\n","updated":"2016-12-04T06:29:47.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciwaantx40003ijnmnn1r4j9f","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-04T06:29:47.000Z","updated":"2016-12-04T06:29:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwaantwt0000ijnm5k7vmw00","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"对 Hexo 吐槽一下","date":"2016-12-01T03:44:59.000Z","_content":"\n# Hexo，想说爱你不容易\n\n* 很早就想弄个 `Github` 博客，这几天终于把想法变成行动，追随大神们的指引，我很自然地找到了在 `Node.js` 界备受瞩目的静态网站生成神器 **`Hexo`**.\n* 大神们对 `Hexo` 的评价是：\n    * 最好用的，没有之一\n    * 简单、快速、强大\n    * 支持 `Markdown`\n* 作为一个 __老菜鸟__(哥年龄不小了，但还是菜鸟水平)，哥当然相信大神们的话。\n* 哥找了个大神([Judas.n](http://code.youmeek.com))的教程(请允许哥称你为大神，因为你比我强太多！)，Follow him step by step...\n* Finally, Everything is OK! But ...\n- \"I have some problems in generating Markdown files to HTML files\".\n    - Markdown works well, but HTML doesn't.\n    - Markdown has no newline, but HTML do.\n    - Markdown can indent, but HTML can't.\n* Any help is welcome!\n\n# 不想再折腾\n\n* 我只是想用 **`Markdown`** 来写博客，以文字为主，不会有太多的图片，存放于云端。\n* 虽然独立博客是一个不错的选择，但生成 `HTML` 的结果却与 `Markdown` 的简单相背离，用户体验是如此之差！\n* 痛定思痛，我决定选择支持纯 `Markdown` 的原生平台，比如：`Github`、`简书`。\n* `简书` 用来记录偏模仿的纯文字的学习笔记，`Github` 则用来记录偏原创的技术类的总结分享。\n* 对于这里，计划改造成为博客的入口，列出所有博客的分类目录。","source":"_posts/MyOpinionAboutHexo.md","raw":"---\ntitle: 对 Hexo 吐槽一下\ndate: 2016-12-01 11:44:59\ntags: [Hexo, blog, Markdown]\n---\n\n# Hexo，想说爱你不容易\n\n* 很早就想弄个 `Github` 博客，这几天终于把想法变成行动，追随大神们的指引，我很自然地找到了在 `Node.js` 界备受瞩目的静态网站生成神器 **`Hexo`**.\n* 大神们对 `Hexo` 的评价是：\n    * 最好用的，没有之一\n    * 简单、快速、强大\n    * 支持 `Markdown`\n* 作为一个 __老菜鸟__(哥年龄不小了，但还是菜鸟水平)，哥当然相信大神们的话。\n* 哥找了个大神([Judas.n](http://code.youmeek.com))的教程(请允许哥称你为大神，因为你比我强太多！)，Follow him step by step...\n* Finally, Everything is OK! But ...\n- \"I have some problems in generating Markdown files to HTML files\".\n    - Markdown works well, but HTML doesn't.\n    - Markdown has no newline, but HTML do.\n    - Markdown can indent, but HTML can't.\n* Any help is welcome!\n\n# 不想再折腾\n\n* 我只是想用 **`Markdown`** 来写博客，以文字为主，不会有太多的图片，存放于云端。\n* 虽然独立博客是一个不错的选择，但生成 `HTML` 的结果却与 `Markdown` 的简单相背离，用户体验是如此之差！\n* 痛定思痛，我决定选择支持纯 `Markdown` 的原生平台，比如：`Github`、`简书`。\n* `简书` 用来记录偏模仿的纯文字的学习笔记，`Github` 则用来记录偏原创的技术类的总结分享。\n* 对于这里，计划改造成为博客的入口，列出所有博客的分类目录。","slug":"MyOpinionAboutHexo","published":1,"updated":"2016-12-04T06:29:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwaantx00002ijnmn22ct0un","content":"<h1 id=\"Hexo，想说爱你不容易\"><a href=\"#Hexo，想说爱你不容易\" class=\"headerlink\" title=\"Hexo，想说爱你不容易\"></a>Hexo，想说爱你不容易</h1><ul>\n<li>很早就想弄个 <code>Github</code> 博客，这几天终于把想法变成行动，追随大神们的指引，我很自然地找到了在 <code>Node.js</code> 界备受瞩目的静态网站生成神器 <strong><code>Hexo</code></strong>.</li>\n<li>大神们对 <code>Hexo</code> 的评价是：<ul>\n<li>最好用的，没有之一</li>\n<li>简单、快速、强大</li>\n<li>支持 <code>Markdown</code></li>\n</ul>\n</li>\n<li>作为一个 <strong>老菜鸟</strong>(哥年龄不小了，但还是菜鸟水平)，哥当然相信大神们的话。</li>\n<li>哥找了个大神(<a href=\"http://code.youmeek.com\" target=\"_blank\" rel=\"external\">Judas.n</a>)的教程(请允许哥称你为大神，因为你比我强太多！)，Follow him step by step…</li>\n<li>Finally, Everything is OK! But …</li>\n</ul>\n<ul>\n<li>“I have some problems in generating Markdown files to HTML files”.<ul>\n<li>Markdown works well, but HTML doesn’t.</li>\n<li>Markdown has no newline, but HTML do.</li>\n<li>Markdown can indent, but HTML can’t.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Any help is welcome!</li>\n</ul>\n<h1 id=\"不想再折腾\"><a href=\"#不想再折腾\" class=\"headerlink\" title=\"不想再折腾\"></a>不想再折腾</h1><ul>\n<li>我只是想用 <strong><code>Markdown</code></strong> 来写博客，以文字为主，不会有太多的图片，存放于云端。</li>\n<li>虽然独立博客是一个不错的选择，但生成 <code>HTML</code> 的结果却与 <code>Markdown</code> 的简单相背离，用户体验是如此之差！</li>\n<li>痛定思痛，我决定选择支持纯 <code>Markdown</code> 的原生平台，比如：<code>Github</code>、<code>简书</code>。</li>\n<li><code>简书</code> 用来记录偏模仿的纯文字的学习笔记，<code>Github</code> 则用来记录偏原创的技术类的总结分享。</li>\n<li>对于这里，计划改造成为博客的入口，列出所有博客的分类目录。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Hexo，想说爱你不容易\"><a href=\"#Hexo，想说爱你不容易\" class=\"headerlink\" title=\"Hexo，想说爱你不容易\"></a>Hexo，想说爱你不容易</h1><ul>\n<li>很早就想弄个 <code>Github</code> 博客，这几天终于把想法变成行动，追随大神们的指引，我很自然地找到了在 <code>Node.js</code> 界备受瞩目的静态网站生成神器 <strong><code>Hexo</code></strong>.</li>\n<li>大神们对 <code>Hexo</code> 的评价是：<ul>\n<li>最好用的，没有之一</li>\n<li>简单、快速、强大</li>\n<li>支持 <code>Markdown</code></li>\n</ul>\n</li>\n<li>作为一个 <strong>老菜鸟</strong>(哥年龄不小了，但还是菜鸟水平)，哥当然相信大神们的话。</li>\n<li>哥找了个大神(<a href=\"http://code.youmeek.com\">Judas.n</a>)的教程(请允许哥称你为大神，因为你比我强太多！)，Follow him step by step…</li>\n<li>Finally, Everything is OK! But …</li>\n</ul>\n<ul>\n<li>“I have some problems in generating Markdown files to HTML files”.<ul>\n<li>Markdown works well, but HTML doesn’t.</li>\n<li>Markdown has no newline, but HTML do.</li>\n<li>Markdown can indent, but HTML can’t.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Any help is welcome!</li>\n</ul>\n<h1 id=\"不想再折腾\"><a href=\"#不想再折腾\" class=\"headerlink\" title=\"不想再折腾\"></a>不想再折腾</h1><ul>\n<li>我只是想用 <strong><code>Markdown</code></strong> 来写博客，以文字为主，不会有太多的图片，存放于云端。</li>\n<li>虽然独立博客是一个不错的选择，但生成 <code>HTML</code> 的结果却与 <code>Markdown</code> 的简单相背离，用户体验是如此之差！</li>\n<li>痛定思痛，我决定选择支持纯 <code>Markdown</code> 的原生平台，比如：<code>Github</code>、<code>简书</code>。</li>\n<li><code>简书</code> 用来记录偏模仿的纯文字的学习笔记，<code>Github</code> 则用来记录偏原创的技术类的总结分享。</li>\n<li>对于这里，计划改造成为博客的入口，列出所有博客的分类目录。</li>\n</ul>\n"},{"title":"IntelliJ IDEA 版本控制","date":"2016-11-24T09:10:08.000Z","_content":"\n## IntelliJ IDEA 版本控制介绍\n\n* 版本控制对于专业码农来说是不可缺少的，不管是个人还是团队开发，都找不到不用版本控制的理由。\n* 对于 IntelliJ IDEA 来说，她非常优雅地集成了版本控制的功能。\n* 不要以为 IntelliJ IDEA 自带了SVN，Git等版本控制工具，她只是自带了支持这些版本控制工具的插件，所以你还需要安装真正的版本控制工具客户端哦~\n* IntelliJ IDEA 旗舰版目前支持主流的版本控制工具：Git、SVN、Mercurial、Perforce、CVS，而且因为现在太多人使用GitHub进行协同开发和项目版本管理，IntelliJ IDEA 同时自带了Github插件，非常方便与github进行交互。\n\n## Git 配置\n\n* 要在 IntelliJ IDEA 中使用git，需要先安装客户端。\n* Git官网下载：[http://git-scm.com](http://git-scm.com/)\n\n## GitHub 配置\n\n- 在设置里找到Github，填写登录账号和密码，点击 `test` 可以测试是否正确访问。\n- 设置成功后，可以直接从Github上checkout项目。\n- 也支持把当前本地项目分享到你的Github账号上。\n- 更爽的是，还支持创建 `Gist`\n\n## SVN (太久没用了，就不写了。。。)\n","source":"_posts/vcsOfIdea.md","raw":"---\ntitle: IntelliJ IDEA 版本控制\ndate: 2016-11-24 17:10:08\ntags: [IDEA, VCS, git, svn]\n---\n\n## IntelliJ IDEA 版本控制介绍\n\n* 版本控制对于专业码农来说是不可缺少的，不管是个人还是团队开发，都找不到不用版本控制的理由。\n* 对于 IntelliJ IDEA 来说，她非常优雅地集成了版本控制的功能。\n* 不要以为 IntelliJ IDEA 自带了SVN，Git等版本控制工具，她只是自带了支持这些版本控制工具的插件，所以你还需要安装真正的版本控制工具客户端哦~\n* IntelliJ IDEA 旗舰版目前支持主流的版本控制工具：Git、SVN、Mercurial、Perforce、CVS，而且因为现在太多人使用GitHub进行协同开发和项目版本管理，IntelliJ IDEA 同时自带了Github插件，非常方便与github进行交互。\n\n## Git 配置\n\n* 要在 IntelliJ IDEA 中使用git，需要先安装客户端。\n* Git官网下载：[http://git-scm.com](http://git-scm.com/)\n\n## GitHub 配置\n\n- 在设置里找到Github，填写登录账号和密码，点击 `test` 可以测试是否正确访问。\n- 设置成功后，可以直接从Github上checkout项目。\n- 也支持把当前本地项目分享到你的Github账号上。\n- 更爽的是，还支持创建 `Gist`\n\n## SVN (太久没用了，就不写了。。。)\n","slug":"vcsOfIdea","published":1,"updated":"2016-12-04T06:42:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwaantx70004ijnmv5m914ht","content":"<h2 id=\"IntelliJ-IDEA-版本控制介绍\"><a href=\"#IntelliJ-IDEA-版本控制介绍\" class=\"headerlink\" title=\"IntelliJ IDEA 版本控制介绍\"></a>IntelliJ IDEA 版本控制介绍</h2><ul>\n<li>版本控制对于专业码农来说是不可缺少的，不管是个人还是团队开发，都找不到不用版本控制的理由。</li>\n<li>对于 IntelliJ IDEA 来说，她非常优雅地集成了版本控制的功能。</li>\n<li>不要以为 IntelliJ IDEA 自带了SVN，Git等版本控制工具，她只是自带了支持这些版本控制工具的插件，所以你还需要安装真正的版本控制工具客户端哦~</li>\n<li>IntelliJ IDEA 旗舰版目前支持主流的版本控制工具：Git、SVN、Mercurial、Perforce、CVS，而且因为现在太多人使用GitHub进行协同开发和项目版本管理，IntelliJ IDEA 同时自带了Github插件，非常方便与github进行交互。</li>\n</ul>\n<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><ul>\n<li>要在 IntelliJ IDEA 中使用git，需要先安装客户端。</li>\n<li>Git官网下载：<a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">http://git-scm.com</a></li>\n</ul>\n<h2 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h2><ul>\n<li>在设置里找到Github，填写登录账号和密码，点击 <code>test</code> 可以测试是否正确访问。</li>\n<li>设置成功后，可以直接从Github上checkout项目。</li>\n<li>也支持把当前本地项目分享到你的Github账号上。</li>\n<li>更爽的是，还支持创建 <code>Gist</code></li>\n</ul>\n<h2 id=\"SVN-太久没用了，就不写了。。。\"><a href=\"#SVN-太久没用了，就不写了。。。\" class=\"headerlink\" title=\"SVN (太久没用了，就不写了。。。)\"></a>SVN (太久没用了，就不写了。。。)</h2>","excerpt":"","more":"<h2 id=\"IntelliJ-IDEA-版本控制介绍\"><a href=\"#IntelliJ-IDEA-版本控制介绍\" class=\"headerlink\" title=\"IntelliJ IDEA 版本控制介绍\"></a>IntelliJ IDEA 版本控制介绍</h2><ul>\n<li>版本控制对于专业码农来说是不可缺少的，不管是个人还是团队开发，都找不到不用版本控制的理由。</li>\n<li>对于 IntelliJ IDEA 来说，她非常优雅地集成了版本控制的功能。</li>\n<li>不要以为 IntelliJ IDEA 自带了SVN，Git等版本控制工具，她只是自带了支持这些版本控制工具的插件，所以你还需要安装真正的版本控制工具客户端哦~</li>\n<li>IntelliJ IDEA 旗舰版目前支持主流的版本控制工具：Git、SVN、Mercurial、Perforce、CVS，而且因为现在太多人使用GitHub进行协同开发和项目版本管理，IntelliJ IDEA 同时自带了Github插件，非常方便与github进行交互。</li>\n</ul>\n<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><ul>\n<li>要在 IntelliJ IDEA 中使用git，需要先安装客户端。</li>\n<li>Git官网下载：<a href=\"http://git-scm.com/\">http://git-scm.com</a></li>\n</ul>\n<h2 id=\"GitHub-配置\"><a href=\"#GitHub-配置\" class=\"headerlink\" title=\"GitHub 配置\"></a>GitHub 配置</h2><ul>\n<li>在设置里找到Github，填写登录账号和密码，点击 <code>test</code> 可以测试是否正确访问。</li>\n<li>设置成功后，可以直接从Github上checkout项目。</li>\n<li>也支持把当前本地项目分享到你的Github账号上。</li>\n<li>更爽的是，还支持创建 <code>Gist</code></li>\n</ul>\n<h2 id=\"SVN-太久没用了，就不写了。。。\"><a href=\"#SVN-太久没用了，就不写了。。。\" class=\"headerlink\" title=\"SVN (太久没用了，就不写了。。。)\"></a>SVN (太久没用了，就不写了。。。)</h2>"},{"title":"Apache Maven 入门","date":"2016-11-28T03:18:20.000Z","_content":"\n# Apache Maven\n\n1. 对Maven不熟，从0学起。\n2. 动起手来，用maven来构建hello world，体会一下不用任何IDE，只用maven的感觉。\n3. maven的核心概念，你知道几个？\n\n## Apache Maven 是用来做什么的？\n\n* Maven 是一个项目管理和自动化构建工具。对于码农来说，我们最关心的是项目构建功能。\n* Maven 使用 **惯例优于配置** 的原则。她要求在没有定制之前，所有的项目都有如下结构：\n\n| 目录 | 目的 |\n| --- | --- |\n| ${basedir} | 存放 pom.xml和所有的子目录 |\n| ${basedir}/src/main/java | 项目的java源代码 |\n| ${basedir}/src/main/resources | 项目的资源，比如说 property 文件 |\n| ${basedir}/src/test/java | 项目的测试类，比如说 JUnit 代码 |\n| ${basedir}/src/test/resources | 测试使用的资源 |\n\n## Maven 的安装\n\n```\n$ mvn -v\nApache Maven 3.0.3 ...\n```\n\n## Maven 的使用\n\n### 建立一个 maven 项目：\n\n* 执行 maven 目标（goal），goal 和 ant 的 target 类似： \n\n``` bash\n$ mvn archetype:generate -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT\n```\n\n* archetype:generate 这个 goal 会列出一系列的 archetype 让你选择。\n* archetype 可以理解成 **项目的模型**。Maven 为我们提供了很多种项目模型，或者说模板，从简单的 Swing 到复杂的 Web 应用。\n* 选择默认的 `maven-archetype-quickstart`  ，编号为：#106\n* 确认项目属性的配置，这些属性是我们在命令行中用 `-D` 选项指定的，使用 `-Dname=value` 的格式。回车确认，创建项目。\n* 以上步骤也可以使用下面的命令代替：\n\n```\nmvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT -DinteractiveMode=false\n```\n\n- 当你第一次运行mvn命令，她会从官方maven库（repository）下载需要的程序，存放在本地库目录（local repository）中，因此，流畅的外网连接对于maven来说是必须的。\n- Maven 默认的本地库是 `~/.m2/repository`\n\n### Maven 项目的文件目录结构：\n  \n* 如果项目顺利成功创建，最后可以看到 `BUILD SUCCESS` 的结果。\n* 同时 maven 会按照之前选择的属性配置和项目模型，为我们建立如下的文件目录结构：\n\n```\nhelloworld\n|-- pom.xml\n`-- src\n |-- main\n |   `-- java\n |       `-- com\n |           `-- mycompany\n |               `-- helloworld\n |                   `-- App.java\n `-- test\n     `-- java\n         `-- com\n             `-- mycompany\n                 `-- helloworld\n                     `-- AppTest.java\n```\n\n* 各文件目录的用途：\n* maven 的 `archetype` 插件建立了一个 `helloworld` 目录，这个名字来自 artifactId;\n* 在 `helloworld` 目录下，有一个 **Project Object Model(POM)** 文件：pom.xml，用于描述项目、配置插件和管理依赖关系。\n* 代码目录结构：\n\n```\n|-- src  # 源代码\n       |-- main  # 正式\n       |   `-- java  # 代码\n       |   `-- resources  # 资源\n       `-- test  # 测试\n           `-- java  # 代码\n           `-- resources  # 资源\n```\n\n* 这个代码目录结构和开始提到的一般Maven项目的目录结构是一致的。\n* 而且 maven 已经为我们建立了一个 `App.java` 类文件。\n\n### Maven 项目的构建和运行\n\n* 一个maven项目默认情况下会产生.jar文件\n* 执行以下命令：\n\n```\n$ cd helloworld\n$ mvn package\n```\n\n* 构建成功，会得到 `BUILD SUCCESS` 的结果。\n* `helloworld` 目录下面会建立一个新目录 `target/`，存放打包后的 .jar 文件 `helloworld-1.0-SNAPSHOT.jar`，以及编译后的 `class` 文件，放在 `target/classes/` 目录下，测试的 `class` 文件放在 `target/test-classes/` 目录下。\n* 运行java程序\n\n```\n$ java -cp target/helloworld-1.0-SNAPSHOT.jar com.mycompany.helloworld.App\n```\n\n* 验证结果\n\n```\nHello World!\n```\n  \n## Maven 的核心概念\n\n- [POM (Project Object Model)](#POM-(Project Object Model))\n- [Maven 插件](#Maven-插件)\n- [Maven 生命周期](#Maven-生命周期)\n- [Maven 依赖管理](#Maven-依赖管理)\n- [Maven 库](#Maven-库)\n\n### __POM (Project Object Model)__\n\n* 一个Maven项目所有的配置都放在 POM 文件中：定义项目的类型、名字、管理依赖关系、定制插件行为等等。比如，可以配置 compiler 插件使用 java 1.5 来编译。\n* 在 POM 中，__groupId，artifactId，packaging，version__ 叫做 Maven 坐标，它能唯一确定一个项目。有了 Maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目、插件，或者父项目。一般 maven 坐标写成如下的格式：\n\n```\ngroupId:artifactId:packaging:version\n```\n\n* 像我们的例子就会写成：\n\n```\ncom.mycompany.helloworld:helloworld:jar:1.0-SNAPSHOT\n```\n\n* 我们的 `helloworld` 示例很简单，但是大项目一般会分成几个子项目。在这种情况下，每个子项目就会有自己的 POM 文件，然后他们会有一个共同的父项目，子项目的 POM 会继承父项目的 POM，只要构建父项目就能够构建所有的子项目。\n* 另外，所有的POM都继承了一个 Super-POM。Super-POM 设置了一些默认值，比如之前提到的默认的目录结构，默认的插件等等，它遵循了惯例优于配置的原则。所以尽管我们的这个 POM 很简单，但是这只是你看到的一部分，运行时候的 POM 要复杂的多。\n* 如果你想看到运行时候的 POM 的全部内容的话，可以运行下面的命令：\n    \n```\n$ mvn help:effective-pom\n```\n\n### __Maven 插件__\n\n* 之前我们用到了 `mvn archetype:generate` 命令来生成一个项目，这是什么意思呢？\n* `archetype` 是一个插件(plugin)的名字\n* `generate` 是目标(goal)的名字\n    * 这个命令是告诉maven执行 `archetype` 插件的 `generate` 目标，即执行一个插件目标，通常写成 *pluginId:goalId* 的形式。\n* 一个目标(goal)是一个工作单元，而插件则是一个或是多个目标的集合。比如：\n    * Jar 插件：包含建立Jar文件的目标\n    * Compiler 插件：包含编译源代码和单元测试代码的目标\n    * Surefire 插件：包含运行单元测试的目标\n* maven 本身不会做太多事情，她其实不知道怎样去编译或者打包。她把构建的任务交给插件去做。\n* 插件定义了常用的构建逻辑，能够被重复利用。这样做的好处是，一旦插件有了更新，那么所有的 Maven 用户都能得到更新。\n  \n### __Maven 生命周期__\n\n* 之前我们用到了 `mvn package` 命令来打包，这个 package 又是啥？\n* 项目的构建过程叫做 Maven 生命周期(lifecycle)，它包含了一系列的有序的阶段(phase)，而一个阶段就是构建过程中的一个步骤。\n* package 就是一个 maven 的生命周期阶段(lifecycle phase)\n* 插件目标可以绑定到生命周期阶段上，一个生命周期阶段可以绑定多个插件目标。\n* 当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。\n* maven 能支持不同的生命周期，但是最常用的还是默认的 Maven 生命周期(default Maven lifecycle)\n* 如果你没有进行任何的插件配置，那么上面的命令 `mvn package` 会依次执行默认生命周期中package阶段前的所有阶段的插件目标，最后执行package阶段的插件目标，如下：\n  1. process-resources 阶段： resources:resources\n  2. compile 阶段： compiler:compile\n  3. process-classes 阶段： 默认无目标\n  4. process-test-resources 阶段： resources:testResources\n  5. test-compile 阶段： compiler:testCompile\n  6. test 阶段： surefire:test\n  7. prepare-package 阶段： 默认无目标\n  8. package 阶段： jar:jar\n      \n### __Maven 依赖管理__\n\n* Maven 坐标能够确定一个项目，也就可以用它来解决依赖关系。\n* 在POM中，依赖关系是在 `dependencies` 部分定义的。\n* 实际开发中会有复杂得多的依赖关系，因为被依赖的jar文件会有自己的依赖关系。\n* 因为maven提供了传递依赖的特性，因此不需要把那些间接依赖的jar文件也定义在pom文件中。\n* 所谓传递依赖，是指maven会检查被依赖的jar文件中的pom文件，把它的依赖关系纳入最终的依赖关系链中。\n* 在 POM 的 `dependencies` 部分中，`scope` 决定了依赖关系的适用范围：\n* test：执行compiler:testCompile 和 surefire:test 时，才会加到 classpath 中\n* provided：表示 JDK 或者 容器会提供所需的jar文件，比如Web应用中的 servlet API 相关的 jar 文件，编译时需要用到，打包时不需要包含在 WAR 包中，因为servlet容器或者应用服务器会提供。\n* compile：任何时候都会被包含在 classpath 中，打包时也会被包含进去。\n    \n### __Maven 库__\n\n* Maven 官方远程库：[http://repo1.maven.org/maven2](http://repo1.maven.org/maven2)，包含核心插件和可供下载的jar包\n* 对于我们自己开发的公共包：\n* 可以搭建私有库\n* 也可以手工安装所需的jar文件到本地库\n\n```\n$ mvn install\n```\n\n* 项目安装到本地库后，其他项目就可以通过 maven 坐标和这个项目建立依赖关系。","source":"_posts/maven.md","raw":"---\ntitle: Apache Maven 入门\ndate: 2016-11-28 11:18:20\ntags: [maven, java, jvm, pom]\n---\n\n# Apache Maven\n\n1. 对Maven不熟，从0学起。\n2. 动起手来，用maven来构建hello world，体会一下不用任何IDE，只用maven的感觉。\n3. maven的核心概念，你知道几个？\n\n## Apache Maven 是用来做什么的？\n\n* Maven 是一个项目管理和自动化构建工具。对于码农来说，我们最关心的是项目构建功能。\n* Maven 使用 **惯例优于配置** 的原则。她要求在没有定制之前，所有的项目都有如下结构：\n\n| 目录 | 目的 |\n| --- | --- |\n| ${basedir} | 存放 pom.xml和所有的子目录 |\n| ${basedir}/src/main/java | 项目的java源代码 |\n| ${basedir}/src/main/resources | 项目的资源，比如说 property 文件 |\n| ${basedir}/src/test/java | 项目的测试类，比如说 JUnit 代码 |\n| ${basedir}/src/test/resources | 测试使用的资源 |\n\n## Maven 的安装\n\n```\n$ mvn -v\nApache Maven 3.0.3 ...\n```\n\n## Maven 的使用\n\n### 建立一个 maven 项目：\n\n* 执行 maven 目标（goal），goal 和 ant 的 target 类似： \n\n``` bash\n$ mvn archetype:generate -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT\n```\n\n* archetype:generate 这个 goal 会列出一系列的 archetype 让你选择。\n* archetype 可以理解成 **项目的模型**。Maven 为我们提供了很多种项目模型，或者说模板，从简单的 Swing 到复杂的 Web 应用。\n* 选择默认的 `maven-archetype-quickstart`  ，编号为：#106\n* 确认项目属性的配置，这些属性是我们在命令行中用 `-D` 选项指定的，使用 `-Dname=value` 的格式。回车确认，创建项目。\n* 以上步骤也可以使用下面的命令代替：\n\n```\nmvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT -DinteractiveMode=false\n```\n\n- 当你第一次运行mvn命令，她会从官方maven库（repository）下载需要的程序，存放在本地库目录（local repository）中，因此，流畅的外网连接对于maven来说是必须的。\n- Maven 默认的本地库是 `~/.m2/repository`\n\n### Maven 项目的文件目录结构：\n  \n* 如果项目顺利成功创建，最后可以看到 `BUILD SUCCESS` 的结果。\n* 同时 maven 会按照之前选择的属性配置和项目模型，为我们建立如下的文件目录结构：\n\n```\nhelloworld\n|-- pom.xml\n`-- src\n |-- main\n |   `-- java\n |       `-- com\n |           `-- mycompany\n |               `-- helloworld\n |                   `-- App.java\n `-- test\n     `-- java\n         `-- com\n             `-- mycompany\n                 `-- helloworld\n                     `-- AppTest.java\n```\n\n* 各文件目录的用途：\n* maven 的 `archetype` 插件建立了一个 `helloworld` 目录，这个名字来自 artifactId;\n* 在 `helloworld` 目录下，有一个 **Project Object Model(POM)** 文件：pom.xml，用于描述项目、配置插件和管理依赖关系。\n* 代码目录结构：\n\n```\n|-- src  # 源代码\n       |-- main  # 正式\n       |   `-- java  # 代码\n       |   `-- resources  # 资源\n       `-- test  # 测试\n           `-- java  # 代码\n           `-- resources  # 资源\n```\n\n* 这个代码目录结构和开始提到的一般Maven项目的目录结构是一致的。\n* 而且 maven 已经为我们建立了一个 `App.java` 类文件。\n\n### Maven 项目的构建和运行\n\n* 一个maven项目默认情况下会产生.jar文件\n* 执行以下命令：\n\n```\n$ cd helloworld\n$ mvn package\n```\n\n* 构建成功，会得到 `BUILD SUCCESS` 的结果。\n* `helloworld` 目录下面会建立一个新目录 `target/`，存放打包后的 .jar 文件 `helloworld-1.0-SNAPSHOT.jar`，以及编译后的 `class` 文件，放在 `target/classes/` 目录下，测试的 `class` 文件放在 `target/test-classes/` 目录下。\n* 运行java程序\n\n```\n$ java -cp target/helloworld-1.0-SNAPSHOT.jar com.mycompany.helloworld.App\n```\n\n* 验证结果\n\n```\nHello World!\n```\n  \n## Maven 的核心概念\n\n- [POM (Project Object Model)](#POM-(Project Object Model))\n- [Maven 插件](#Maven-插件)\n- [Maven 生命周期](#Maven-生命周期)\n- [Maven 依赖管理](#Maven-依赖管理)\n- [Maven 库](#Maven-库)\n\n### __POM (Project Object Model)__\n\n* 一个Maven项目所有的配置都放在 POM 文件中：定义项目的类型、名字、管理依赖关系、定制插件行为等等。比如，可以配置 compiler 插件使用 java 1.5 来编译。\n* 在 POM 中，__groupId，artifactId，packaging，version__ 叫做 Maven 坐标，它能唯一确定一个项目。有了 Maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目、插件，或者父项目。一般 maven 坐标写成如下的格式：\n\n```\ngroupId:artifactId:packaging:version\n```\n\n* 像我们的例子就会写成：\n\n```\ncom.mycompany.helloworld:helloworld:jar:1.0-SNAPSHOT\n```\n\n* 我们的 `helloworld` 示例很简单，但是大项目一般会分成几个子项目。在这种情况下，每个子项目就会有自己的 POM 文件，然后他们会有一个共同的父项目，子项目的 POM 会继承父项目的 POM，只要构建父项目就能够构建所有的子项目。\n* 另外，所有的POM都继承了一个 Super-POM。Super-POM 设置了一些默认值，比如之前提到的默认的目录结构，默认的插件等等，它遵循了惯例优于配置的原则。所以尽管我们的这个 POM 很简单，但是这只是你看到的一部分，运行时候的 POM 要复杂的多。\n* 如果你想看到运行时候的 POM 的全部内容的话，可以运行下面的命令：\n    \n```\n$ mvn help:effective-pom\n```\n\n### __Maven 插件__\n\n* 之前我们用到了 `mvn archetype:generate` 命令来生成一个项目，这是什么意思呢？\n* `archetype` 是一个插件(plugin)的名字\n* `generate` 是目标(goal)的名字\n    * 这个命令是告诉maven执行 `archetype` 插件的 `generate` 目标，即执行一个插件目标，通常写成 *pluginId:goalId* 的形式。\n* 一个目标(goal)是一个工作单元，而插件则是一个或是多个目标的集合。比如：\n    * Jar 插件：包含建立Jar文件的目标\n    * Compiler 插件：包含编译源代码和单元测试代码的目标\n    * Surefire 插件：包含运行单元测试的目标\n* maven 本身不会做太多事情，她其实不知道怎样去编译或者打包。她把构建的任务交给插件去做。\n* 插件定义了常用的构建逻辑，能够被重复利用。这样做的好处是，一旦插件有了更新，那么所有的 Maven 用户都能得到更新。\n  \n### __Maven 生命周期__\n\n* 之前我们用到了 `mvn package` 命令来打包，这个 package 又是啥？\n* 项目的构建过程叫做 Maven 生命周期(lifecycle)，它包含了一系列的有序的阶段(phase)，而一个阶段就是构建过程中的一个步骤。\n* package 就是一个 maven 的生命周期阶段(lifecycle phase)\n* 插件目标可以绑定到生命周期阶段上，一个生命周期阶段可以绑定多个插件目标。\n* 当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。\n* maven 能支持不同的生命周期，但是最常用的还是默认的 Maven 生命周期(default Maven lifecycle)\n* 如果你没有进行任何的插件配置，那么上面的命令 `mvn package` 会依次执行默认生命周期中package阶段前的所有阶段的插件目标，最后执行package阶段的插件目标，如下：\n  1. process-resources 阶段： resources:resources\n  2. compile 阶段： compiler:compile\n  3. process-classes 阶段： 默认无目标\n  4. process-test-resources 阶段： resources:testResources\n  5. test-compile 阶段： compiler:testCompile\n  6. test 阶段： surefire:test\n  7. prepare-package 阶段： 默认无目标\n  8. package 阶段： jar:jar\n      \n### __Maven 依赖管理__\n\n* Maven 坐标能够确定一个项目，也就可以用它来解决依赖关系。\n* 在POM中，依赖关系是在 `dependencies` 部分定义的。\n* 实际开发中会有复杂得多的依赖关系，因为被依赖的jar文件会有自己的依赖关系。\n* 因为maven提供了传递依赖的特性，因此不需要把那些间接依赖的jar文件也定义在pom文件中。\n* 所谓传递依赖，是指maven会检查被依赖的jar文件中的pom文件，把它的依赖关系纳入最终的依赖关系链中。\n* 在 POM 的 `dependencies` 部分中，`scope` 决定了依赖关系的适用范围：\n* test：执行compiler:testCompile 和 surefire:test 时，才会加到 classpath 中\n* provided：表示 JDK 或者 容器会提供所需的jar文件，比如Web应用中的 servlet API 相关的 jar 文件，编译时需要用到，打包时不需要包含在 WAR 包中，因为servlet容器或者应用服务器会提供。\n* compile：任何时候都会被包含在 classpath 中，打包时也会被包含进去。\n    \n### __Maven 库__\n\n* Maven 官方远程库：[http://repo1.maven.org/maven2](http://repo1.maven.org/maven2)，包含核心插件和可供下载的jar包\n* 对于我们自己开发的公共包：\n* 可以搭建私有库\n* 也可以手工安装所需的jar文件到本地库\n\n```\n$ mvn install\n```\n\n* 项目安装到本地库后，其他项目就可以通过 maven 坐标和这个项目建立依赖关系。","slug":"maven","published":1,"updated":"2016-12-04T06:29:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwaantxf0006ijnmfr2dyalb","content":"<h1 id=\"Apache-Maven\"><a href=\"#Apache-Maven\" class=\"headerlink\" title=\"Apache Maven\"></a>Apache Maven</h1><ol>\n<li>对Maven不熟，从0学起。</li>\n<li>动起手来，用maven来构建hello world，体会一下不用任何IDE，只用maven的感觉。</li>\n<li>maven的核心概念，你知道几个？</li>\n</ol>\n<h2 id=\"Apache-Maven-是用来做什么的？\"><a href=\"#Apache-Maven-是用来做什么的？\" class=\"headerlink\" title=\"Apache Maven 是用来做什么的？\"></a>Apache Maven 是用来做什么的？</h2><ul>\n<li>Maven 是一个项目管理和自动化构建工具。对于码农来说，我们最关心的是项目构建功能。</li>\n<li>Maven 使用 <strong>惯例优于配置</strong> 的原则。她要求在没有定制之前，所有的项目都有如下结构：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${basedir}</td>\n<td>存放 pom.xml和所有的子目录</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/java</td>\n<td>项目的java源代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/resources</td>\n<td>项目的资源，比如说 property 文件</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/java</td>\n<td>项目的测试类，比如说 JUnit 代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/resources</td>\n<td>测试使用的资源</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Maven-的安装\"><a href=\"#Maven-的安装\" class=\"headerlink\" title=\"Maven 的安装\"></a>Maven 的安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn -v</div><div class=\"line\">Apache Maven 3.0.3 ...</div></pre></td></tr></table></figure>\n<h2 id=\"Maven-的使用\"><a href=\"#Maven-的使用\" class=\"headerlink\" title=\"Maven 的使用\"></a>Maven 的使用</h2><h3 id=\"建立一个-maven-项目：\"><a href=\"#建立一个-maven-项目：\" class=\"headerlink\" title=\"建立一个 maven 项目：\"></a>建立一个 maven 项目：</h3><ul>\n<li>执行 maven 目标（goal），goal 和 ant 的 target 类似： </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn archetype:generate -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT</div></pre></td></tr></table></figure>\n<ul>\n<li>archetype:generate 这个 goal 会列出一系列的 archetype 让你选择。</li>\n<li>archetype 可以理解成 <strong>项目的模型</strong>。Maven 为我们提供了很多种项目模型，或者说模板，从简单的 Swing 到复杂的 Web 应用。</li>\n<li>选择默认的 <code>maven-archetype-quickstart</code>  ，编号为：#106</li>\n<li>确认项目属性的配置，这些属性是我们在命令行中用 <code>-D</code> 选项指定的，使用 <code>-Dname=value</code> 的格式。回车确认，创建项目。</li>\n<li>以上步骤也可以使用下面的命令代替：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT -DinteractiveMode=false</div></pre></td></tr></table></figure>\n<ul>\n<li>当你第一次运行mvn命令，她会从官方maven库（repository）下载需要的程序，存放在本地库目录（local repository）中，因此，流畅的外网连接对于maven来说是必须的。</li>\n<li>Maven 默认的本地库是 <code>~/.m2/repository</code></li>\n</ul>\n<h3 id=\"Maven-项目的文件目录结构：\"><a href=\"#Maven-项目的文件目录结构：\" class=\"headerlink\" title=\"Maven 项目的文件目录结构：\"></a>Maven 项目的文件目录结构：</h3><ul>\n<li>如果项目顺利成功创建，最后可以看到 <code>BUILD SUCCESS</code> 的结果。</li>\n<li>同时 maven 会按照之前选择的属性配置和项目模型，为我们建立如下的文件目录结构：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">helloworld</div><div class=\"line\">|-- pom.xml</div><div class=\"line\">`-- src</div><div class=\"line\"> |-- main</div><div class=\"line\"> |   `-- java</div><div class=\"line\"> |       `-- com</div><div class=\"line\"> |           `-- mycompany</div><div class=\"line\"> |               `-- helloworld</div><div class=\"line\"> |                   `-- App.java</div><div class=\"line\"> `-- test</div><div class=\"line\">     `-- java</div><div class=\"line\">         `-- com</div><div class=\"line\">             `-- mycompany</div><div class=\"line\">                 `-- helloworld</div><div class=\"line\">                     `-- AppTest.java</div></pre></td></tr></table></figure>\n<ul>\n<li>各文件目录的用途：</li>\n<li>maven 的 <code>archetype</code> 插件建立了一个 <code>helloworld</code> 目录，这个名字来自 artifactId;</li>\n<li>在 <code>helloworld</code> 目录下，有一个 <strong>Project Object Model(POM)</strong> 文件：pom.xml，用于描述项目、配置插件和管理依赖关系。</li>\n<li>代码目录结构：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-- src  # 源代码</div><div class=\"line\">       |-- main  # 正式</div><div class=\"line\">       |   `-- java  # 代码</div><div class=\"line\">       |   `-- resources  # 资源</div><div class=\"line\">       `-- test  # 测试</div><div class=\"line\">           `-- java  # 代码</div><div class=\"line\">           `-- resources  # 资源</div></pre></td></tr></table></figure>\n<ul>\n<li>这个代码目录结构和开始提到的一般Maven项目的目录结构是一致的。</li>\n<li>而且 maven 已经为我们建立了一个 <code>App.java</code> 类文件。</li>\n</ul>\n<h3 id=\"Maven-项目的构建和运行\"><a href=\"#Maven-项目的构建和运行\" class=\"headerlink\" title=\"Maven 项目的构建和运行\"></a>Maven 项目的构建和运行</h3><ul>\n<li>一个maven项目默认情况下会产生.jar文件</li>\n<li>执行以下命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd helloworld</div><div class=\"line\">$ mvn package</div></pre></td></tr></table></figure>\n<ul>\n<li>构建成功，会得到 <code>BUILD SUCCESS</code> 的结果。</li>\n<li><code>helloworld</code> 目录下面会建立一个新目录 <code>target/</code>，存放打包后的 .jar 文件 <code>helloworld-1.0-SNAPSHOT.jar</code>，以及编译后的 <code>class</code> 文件，放在 <code>target/classes/</code> 目录下，测试的 <code>class</code> 文件放在 <code>target/test-classes/</code> 目录下。</li>\n<li>运行java程序</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -cp target/helloworld-1.0-SNAPSHOT.jar com.mycompany.helloworld.App</div></pre></td></tr></table></figure>\n<ul>\n<li>验证结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World!</div></pre></td></tr></table></figure>\n<h2 id=\"Maven-的核心概念\"><a href=\"#Maven-的核心概念\" class=\"headerlink\" title=\"Maven 的核心概念\"></a>Maven 的核心概念</h2><ul>\n<li><a href=\"#POM-(Project Object Model\">POM (Project Object Model)</a>)</li>\n<li><a href=\"#Maven-插件\">Maven 插件</a></li>\n<li><a href=\"#Maven-生命周期\">Maven 生命周期</a></li>\n<li><a href=\"#Maven-依赖管理\">Maven 依赖管理</a></li>\n<li><a href=\"#Maven-库\">Maven 库</a></li>\n</ul>\n<h3 id=\"POM-Project-Object-Model\"><a href=\"#POM-Project-Object-Model\" class=\"headerlink\" title=\"POM (Project Object Model)\"></a><strong>POM (Project Object Model)</strong></h3><ul>\n<li>一个Maven项目所有的配置都放在 POM 文件中：定义项目的类型、名字、管理依赖关系、定制插件行为等等。比如，可以配置 compiler 插件使用 java 1.5 来编译。</li>\n<li>在 POM 中，<strong>groupId，artifactId，packaging，version</strong> 叫做 Maven 坐标，它能唯一确定一个项目。有了 Maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目、插件，或者父项目。一般 maven 坐标写成如下的格式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupId:artifactId:packaging:version</div></pre></td></tr></table></figure>\n<ul>\n<li>像我们的例子就会写成：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.mycompany.helloworld:helloworld:jar:1.0-SNAPSHOT</div></pre></td></tr></table></figure>\n<ul>\n<li>我们的 <code>helloworld</code> 示例很简单，但是大项目一般会分成几个子项目。在这种情况下，每个子项目就会有自己的 POM 文件，然后他们会有一个共同的父项目，子项目的 POM 会继承父项目的 POM，只要构建父项目就能够构建所有的子项目。</li>\n<li>另外，所有的POM都继承了一个 Super-POM。Super-POM 设置了一些默认值，比如之前提到的默认的目录结构，默认的插件等等，它遵循了惯例优于配置的原则。所以尽管我们的这个 POM 很简单，但是这只是你看到的一部分，运行时候的 POM 要复杂的多。</li>\n<li>如果你想看到运行时候的 POM 的全部内容的话，可以运行下面的命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn help:effective-pom</div></pre></td></tr></table></figure>\n<h3 id=\"Maven-插件\"><a href=\"#Maven-插件\" class=\"headerlink\" title=\"Maven 插件\"></a><strong>Maven 插件</strong></h3><ul>\n<li>之前我们用到了 <code>mvn archetype:generate</code> 命令来生成一个项目，这是什么意思呢？</li>\n<li><code>archetype</code> 是一个插件(plugin)的名字</li>\n<li><code>generate</code> 是目标(goal)的名字<ul>\n<li>这个命令是告诉maven执行 <code>archetype</code> 插件的 <code>generate</code> 目标，即执行一个插件目标，通常写成 <em>pluginId:goalId</em> 的形式。</li>\n</ul>\n</li>\n<li>一个目标(goal)是一个工作单元，而插件则是一个或是多个目标的集合。比如：<ul>\n<li>Jar 插件：包含建立Jar文件的目标</li>\n<li>Compiler 插件：包含编译源代码和单元测试代码的目标</li>\n<li>Surefire 插件：包含运行单元测试的目标</li>\n</ul>\n</li>\n<li>maven 本身不会做太多事情，她其实不知道怎样去编译或者打包。她把构建的任务交给插件去做。</li>\n<li>插件定义了常用的构建逻辑，能够被重复利用。这样做的好处是，一旦插件有了更新，那么所有的 Maven 用户都能得到更新。</li>\n</ul>\n<h3 id=\"Maven-生命周期\"><a href=\"#Maven-生命周期\" class=\"headerlink\" title=\"Maven 生命周期\"></a><strong>Maven 生命周期</strong></h3><ul>\n<li>之前我们用到了 <code>mvn package</code> 命令来打包，这个 package 又是啥？</li>\n<li>项目的构建过程叫做 Maven 生命周期(lifecycle)，它包含了一系列的有序的阶段(phase)，而一个阶段就是构建过程中的一个步骤。</li>\n<li>package 就是一个 maven 的生命周期阶段(lifecycle phase)</li>\n<li>插件目标可以绑定到生命周期阶段上，一个生命周期阶段可以绑定多个插件目标。</li>\n<li>当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。</li>\n<li>maven 能支持不同的生命周期，但是最常用的还是默认的 Maven 生命周期(default Maven lifecycle)</li>\n<li>如果你没有进行任何的插件配置，那么上面的命令 <code>mvn package</code> 会依次执行默认生命周期中package阶段前的所有阶段的插件目标，最后执行package阶段的插件目标，如下：<ol>\n<li>process-resources 阶段： resources:resources</li>\n<li>compile 阶段： compiler:compile</li>\n<li>process-classes 阶段： 默认无目标</li>\n<li>process-test-resources 阶段： resources:testResources</li>\n<li>test-compile 阶段： compiler:testCompile</li>\n<li>test 阶段： surefire:test</li>\n<li>prepare-package 阶段： 默认无目标</li>\n<li>package 阶段： jar:jar</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Maven-依赖管理\"><a href=\"#Maven-依赖管理\" class=\"headerlink\" title=\"Maven 依赖管理\"></a><strong>Maven 依赖管理</strong></h3><ul>\n<li>Maven 坐标能够确定一个项目，也就可以用它来解决依赖关系。</li>\n<li>在POM中，依赖关系是在 <code>dependencies</code> 部分定义的。</li>\n<li>实际开发中会有复杂得多的依赖关系，因为被依赖的jar文件会有自己的依赖关系。</li>\n<li>因为maven提供了传递依赖的特性，因此不需要把那些间接依赖的jar文件也定义在pom文件中。</li>\n<li>所谓传递依赖，是指maven会检查被依赖的jar文件中的pom文件，把它的依赖关系纳入最终的依赖关系链中。</li>\n<li>在 POM 的 <code>dependencies</code> 部分中，<code>scope</code> 决定了依赖关系的适用范围：</li>\n<li>test：执行compiler:testCompile 和 surefire:test 时，才会加到 classpath 中</li>\n<li>provided：表示 JDK 或者 容器会提供所需的jar文件，比如Web应用中的 servlet API 相关的 jar 文件，编译时需要用到，打包时不需要包含在 WAR 包中，因为servlet容器或者应用服务器会提供。</li>\n<li>compile：任何时候都会被包含在 classpath 中，打包时也会被包含进去。</li>\n</ul>\n<h3 id=\"Maven-库\"><a href=\"#Maven-库\" class=\"headerlink\" title=\"Maven 库\"></a><strong>Maven 库</strong></h3><ul>\n<li>Maven 官方远程库：<a href=\"http://repo1.maven.org/maven2\" target=\"_blank\" rel=\"external\">http://repo1.maven.org/maven2</a>，包含核心插件和可供下载的jar包</li>\n<li>对于我们自己开发的公共包：</li>\n<li>可以搭建私有库</li>\n<li>也可以手工安装所需的jar文件到本地库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn install</div></pre></td></tr></table></figure>\n<ul>\n<li>项目安装到本地库后，其他项目就可以通过 maven 坐标和这个项目建立依赖关系。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Apache-Maven\"><a href=\"#Apache-Maven\" class=\"headerlink\" title=\"Apache Maven\"></a>Apache Maven</h1><ol>\n<li>对Maven不熟，从0学起。</li>\n<li>动起手来，用maven来构建hello world，体会一下不用任何IDE，只用maven的感觉。</li>\n<li>maven的核心概念，你知道几个？</li>\n</ol>\n<h2 id=\"Apache-Maven-是用来做什么的？\"><a href=\"#Apache-Maven-是用来做什么的？\" class=\"headerlink\" title=\"Apache Maven 是用来做什么的？\"></a>Apache Maven 是用来做什么的？</h2><ul>\n<li>Maven 是一个项目管理和自动化构建工具。对于码农来说，我们最关心的是项目构建功能。</li>\n<li>Maven 使用 <strong>惯例优于配置</strong> 的原则。她要求在没有定制之前，所有的项目都有如下结构：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${basedir}</td>\n<td>存放 pom.xml和所有的子目录</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/java</td>\n<td>项目的java源代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/main/resources</td>\n<td>项目的资源，比如说 property 文件</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/java</td>\n<td>项目的测试类，比如说 JUnit 代码</td>\n</tr>\n<tr>\n<td>${basedir}/src/test/resources</td>\n<td>测试使用的资源</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Maven-的安装\"><a href=\"#Maven-的安装\" class=\"headerlink\" title=\"Maven 的安装\"></a>Maven 的安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn -v</div><div class=\"line\">Apache Maven 3.0.3 ...</div></pre></td></tr></table></figure>\n<h2 id=\"Maven-的使用\"><a href=\"#Maven-的使用\" class=\"headerlink\" title=\"Maven 的使用\"></a>Maven 的使用</h2><h3 id=\"建立一个-maven-项目：\"><a href=\"#建立一个-maven-项目：\" class=\"headerlink\" title=\"建立一个 maven 项目：\"></a>建立一个 maven 项目：</h3><ul>\n<li>执行 maven 目标（goal），goal 和 ant 的 target 类似： </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn archetype:generate -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT</div></pre></td></tr></table></figure>\n<ul>\n<li>archetype:generate 这个 goal 会列出一系列的 archetype 让你选择。</li>\n<li>archetype 可以理解成 <strong>项目的模型</strong>。Maven 为我们提供了很多种项目模型，或者说模板，从简单的 Swing 到复杂的 Web 应用。</li>\n<li>选择默认的 <code>maven-archetype-quickstart</code>  ，编号为：#106</li>\n<li>确认项目属性的配置，这些属性是我们在命令行中用 <code>-D</code> 选项指定的，使用 <code>-Dname=value</code> 的格式。回车确认，创建项目。</li>\n<li>以上步骤也可以使用下面的命令代替：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn archetype:generate -DarchetypeArtifactId=maven-archetype-quickstart -DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT -DinteractiveMode=false</div></pre></td></tr></table></figure>\n<ul>\n<li>当你第一次运行mvn命令，她会从官方maven库（repository）下载需要的程序，存放在本地库目录（local repository）中，因此，流畅的外网连接对于maven来说是必须的。</li>\n<li>Maven 默认的本地库是 <code>~/.m2/repository</code></li>\n</ul>\n<h3 id=\"Maven-项目的文件目录结构：\"><a href=\"#Maven-项目的文件目录结构：\" class=\"headerlink\" title=\"Maven 项目的文件目录结构：\"></a>Maven 项目的文件目录结构：</h3><ul>\n<li>如果项目顺利成功创建，最后可以看到 <code>BUILD SUCCESS</code> 的结果。</li>\n<li>同时 maven 会按照之前选择的属性配置和项目模型，为我们建立如下的文件目录结构：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">helloworld</div><div class=\"line\">|-- pom.xml</div><div class=\"line\">`-- src</div><div class=\"line\"> |-- main</div><div class=\"line\"> |   `-- java</div><div class=\"line\"> |       `-- com</div><div class=\"line\"> |           `-- mycompany</div><div class=\"line\"> |               `-- helloworld</div><div class=\"line\"> |                   `-- App.java</div><div class=\"line\"> `-- test</div><div class=\"line\">     `-- java</div><div class=\"line\">         `-- com</div><div class=\"line\">             `-- mycompany</div><div class=\"line\">                 `-- helloworld</div><div class=\"line\">                     `-- AppTest.java</div></pre></td></tr></table></figure>\n<ul>\n<li>各文件目录的用途：</li>\n<li>maven 的 <code>archetype</code> 插件建立了一个 <code>helloworld</code> 目录，这个名字来自 artifactId;</li>\n<li>在 <code>helloworld</code> 目录下，有一个 <strong>Project Object Model(POM)</strong> 文件：pom.xml，用于描述项目、配置插件和管理依赖关系。</li>\n<li>代码目录结构：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-- src  # 源代码</div><div class=\"line\">       |-- main  # 正式</div><div class=\"line\">       |   `-- java  # 代码</div><div class=\"line\">       |   `-- resources  # 资源</div><div class=\"line\">       `-- test  # 测试</div><div class=\"line\">           `-- java  # 代码</div><div class=\"line\">           `-- resources  # 资源</div></pre></td></tr></table></figure>\n<ul>\n<li>这个代码目录结构和开始提到的一般Maven项目的目录结构是一致的。</li>\n<li>而且 maven 已经为我们建立了一个 <code>App.java</code> 类文件。</li>\n</ul>\n<h3 id=\"Maven-项目的构建和运行\"><a href=\"#Maven-项目的构建和运行\" class=\"headerlink\" title=\"Maven 项目的构建和运行\"></a>Maven 项目的构建和运行</h3><ul>\n<li>一个maven项目默认情况下会产生.jar文件</li>\n<li>执行以下命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd helloworld</div><div class=\"line\">$ mvn package</div></pre></td></tr></table></figure>\n<ul>\n<li>构建成功，会得到 <code>BUILD SUCCESS</code> 的结果。</li>\n<li><code>helloworld</code> 目录下面会建立一个新目录 <code>target/</code>，存放打包后的 .jar 文件 <code>helloworld-1.0-SNAPSHOT.jar</code>，以及编译后的 <code>class</code> 文件，放在 <code>target/classes/</code> 目录下，测试的 <code>class</code> 文件放在 <code>target/test-classes/</code> 目录下。</li>\n<li>运行java程序</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -cp target/helloworld-1.0-SNAPSHOT.jar com.mycompany.helloworld.App</div></pre></td></tr></table></figure>\n<ul>\n<li>验证结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello World!</div></pre></td></tr></table></figure>\n<h2 id=\"Maven-的核心概念\"><a href=\"#Maven-的核心概念\" class=\"headerlink\" title=\"Maven 的核心概念\"></a>Maven 的核心概念</h2><ul>\n<li><a href=\"#POM-(Project Object Model\">POM (Project Object Model)</a>)</li>\n<li><a href=\"#Maven-插件\">Maven 插件</a></li>\n<li><a href=\"#Maven-生命周期\">Maven 生命周期</a></li>\n<li><a href=\"#Maven-依赖管理\">Maven 依赖管理</a></li>\n<li><a href=\"#Maven-库\">Maven 库</a></li>\n</ul>\n<h3 id=\"POM-Project-Object-Model\"><a href=\"#POM-Project-Object-Model\" class=\"headerlink\" title=\"POM (Project Object Model)\"></a><strong>POM (Project Object Model)</strong></h3><ul>\n<li>一个Maven项目所有的配置都放在 POM 文件中：定义项目的类型、名字、管理依赖关系、定制插件行为等等。比如，可以配置 compiler 插件使用 java 1.5 来编译。</li>\n<li>在 POM 中，<strong>groupId，artifactId，packaging，version</strong> 叫做 Maven 坐标，它能唯一确定一个项目。有了 Maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目、插件，或者父项目。一般 maven 坐标写成如下的格式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupId:artifactId:packaging:version</div></pre></td></tr></table></figure>\n<ul>\n<li>像我们的例子就会写成：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.mycompany.helloworld:helloworld:jar:1.0-SNAPSHOT</div></pre></td></tr></table></figure>\n<ul>\n<li>我们的 <code>helloworld</code> 示例很简单，但是大项目一般会分成几个子项目。在这种情况下，每个子项目就会有自己的 POM 文件，然后他们会有一个共同的父项目，子项目的 POM 会继承父项目的 POM，只要构建父项目就能够构建所有的子项目。</li>\n<li>另外，所有的POM都继承了一个 Super-POM。Super-POM 设置了一些默认值，比如之前提到的默认的目录结构，默认的插件等等，它遵循了惯例优于配置的原则。所以尽管我们的这个 POM 很简单，但是这只是你看到的一部分，运行时候的 POM 要复杂的多。</li>\n<li>如果你想看到运行时候的 POM 的全部内容的话，可以运行下面的命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn help:effective-pom</div></pre></td></tr></table></figure>\n<h3 id=\"Maven-插件\"><a href=\"#Maven-插件\" class=\"headerlink\" title=\"Maven 插件\"></a><strong>Maven 插件</strong></h3><ul>\n<li>之前我们用到了 <code>mvn archetype:generate</code> 命令来生成一个项目，这是什么意思呢？</li>\n<li><code>archetype</code> 是一个插件(plugin)的名字</li>\n<li><code>generate</code> 是目标(goal)的名字<ul>\n<li>这个命令是告诉maven执行 <code>archetype</code> 插件的 <code>generate</code> 目标，即执行一个插件目标，通常写成 <em>pluginId:goalId</em> 的形式。</li>\n</ul>\n</li>\n<li>一个目标(goal)是一个工作单元，而插件则是一个或是多个目标的集合。比如：<ul>\n<li>Jar 插件：包含建立Jar文件的目标</li>\n<li>Compiler 插件：包含编译源代码和单元测试代码的目标</li>\n<li>Surefire 插件：包含运行单元测试的目标</li>\n</ul>\n</li>\n<li>maven 本身不会做太多事情，她其实不知道怎样去编译或者打包。她把构建的任务交给插件去做。</li>\n<li>插件定义了常用的构建逻辑，能够被重复利用。这样做的好处是，一旦插件有了更新，那么所有的 Maven 用户都能得到更新。</li>\n</ul>\n<h3 id=\"Maven-生命周期\"><a href=\"#Maven-生命周期\" class=\"headerlink\" title=\"Maven 生命周期\"></a><strong>Maven 生命周期</strong></h3><ul>\n<li>之前我们用到了 <code>mvn package</code> 命令来打包，这个 package 又是啥？</li>\n<li>项目的构建过程叫做 Maven 生命周期(lifecycle)，它包含了一系列的有序的阶段(phase)，而一个阶段就是构建过程中的一个步骤。</li>\n<li>package 就是一个 maven 的生命周期阶段(lifecycle phase)</li>\n<li>插件目标可以绑定到生命周期阶段上，一个生命周期阶段可以绑定多个插件目标。</li>\n<li>当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。</li>\n<li>maven 能支持不同的生命周期，但是最常用的还是默认的 Maven 生命周期(default Maven lifecycle)</li>\n<li>如果你没有进行任何的插件配置，那么上面的命令 <code>mvn package</code> 会依次执行默认生命周期中package阶段前的所有阶段的插件目标，最后执行package阶段的插件目标，如下：<ol>\n<li>process-resources 阶段： resources:resources</li>\n<li>compile 阶段： compiler:compile</li>\n<li>process-classes 阶段： 默认无目标</li>\n<li>process-test-resources 阶段： resources:testResources</li>\n<li>test-compile 阶段： compiler:testCompile</li>\n<li>test 阶段： surefire:test</li>\n<li>prepare-package 阶段： 默认无目标</li>\n<li>package 阶段： jar:jar</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Maven-依赖管理\"><a href=\"#Maven-依赖管理\" class=\"headerlink\" title=\"Maven 依赖管理\"></a><strong>Maven 依赖管理</strong></h3><ul>\n<li>Maven 坐标能够确定一个项目，也就可以用它来解决依赖关系。</li>\n<li>在POM中，依赖关系是在 <code>dependencies</code> 部分定义的。</li>\n<li>实际开发中会有复杂得多的依赖关系，因为被依赖的jar文件会有自己的依赖关系。</li>\n<li>因为maven提供了传递依赖的特性，因此不需要把那些间接依赖的jar文件也定义在pom文件中。</li>\n<li>所谓传递依赖，是指maven会检查被依赖的jar文件中的pom文件，把它的依赖关系纳入最终的依赖关系链中。</li>\n<li>在 POM 的 <code>dependencies</code> 部分中，<code>scope</code> 决定了依赖关系的适用范围：</li>\n<li>test：执行compiler:testCompile 和 surefire:test 时，才会加到 classpath 中</li>\n<li>provided：表示 JDK 或者 容器会提供所需的jar文件，比如Web应用中的 servlet API 相关的 jar 文件，编译时需要用到，打包时不需要包含在 WAR 包中，因为servlet容器或者应用服务器会提供。</li>\n<li>compile：任何时候都会被包含在 classpath 中，打包时也会被包含进去。</li>\n</ul>\n<h3 id=\"Maven-库\"><a href=\"#Maven-库\" class=\"headerlink\" title=\"Maven 库\"></a><strong>Maven 库</strong></h3><ul>\n<li>Maven 官方远程库：<a href=\"http://repo1.maven.org/maven2\">http://repo1.maven.org/maven2</a>，包含核心插件和可供下载的jar包</li>\n<li>对于我们自己开发的公共包：</li>\n<li>可以搭建私有库</li>\n<li>也可以手工安装所需的jar文件到本地库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn install</div></pre></td></tr></table></figure>\n<ul>\n<li>项目安装到本地库后，其他项目就可以通过 maven 坐标和这个项目建立依赖关系。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciwaantx00002ijnmn22ct0un","tag_id":"ciwaantxb0005ijnmh1qlkfnb","_id":"ciwaantxr000aijnmdciifxey"},{"post_id":"ciwaantx00002ijnmn22ct0un","tag_id":"ciwaantxm0007ijnmve9wvncp","_id":"ciwaantxs000bijnmi90qvyq2"},{"post_id":"ciwaantx00002ijnmn22ct0un","tag_id":"ciwaantxn0008ijnmkcl7i4da","_id":"ciwaantxt000dijnm2ui5c8q1"},{"post_id":"ciwaantx70004ijnmv5m914ht","tag_id":"ciwaantxq0009ijnmkxnaxu0f","_id":"ciwaantxv000hijnmvmdm7tbj"},{"post_id":"ciwaantx70004ijnmv5m914ht","tag_id":"ciwaantxs000cijnmwr9nrwsm","_id":"ciwaantxw000iijnm2kl3agkw"},{"post_id":"ciwaantx70004ijnmv5m914ht","tag_id":"ciwaantxu000eijnmdbt9vye6","_id":"ciwaantxx000kijnmcw9wgt1b"},{"post_id":"ciwaantx70004ijnmv5m914ht","tag_id":"ciwaantxv000fijnmtnxj7add","_id":"ciwaantxx000lijnmtbcc0xp1"},{"post_id":"ciwaantxf0006ijnmfr2dyalb","tag_id":"ciwaantxv000gijnm1po2cdv2","_id":"ciwaanty1000oijnm7lr932f5"},{"post_id":"ciwaantxf0006ijnmfr2dyalb","tag_id":"ciwaantxx000jijnme5ytogj7","_id":"ciwaanty2000pijnml6eu2w78"},{"post_id":"ciwaantxf0006ijnmfr2dyalb","tag_id":"ciwaantxz000mijnmav4osoqx","_id":"ciwaanty2000qijnmuc0brgtp"},{"post_id":"ciwaantxf0006ijnmfr2dyalb","tag_id":"ciwaanty0000nijnm2xvjfs7s","_id":"ciwaanty3000rijnmicfmro4h"}],"Tag":[{"name":"Hexo","_id":"ciwaantxb0005ijnmh1qlkfnb"},{"name":"blog","_id":"ciwaantxm0007ijnmve9wvncp"},{"name":"Markdown","_id":"ciwaantxn0008ijnmkcl7i4da"},{"name":"IDEA","_id":"ciwaantxq0009ijnmkxnaxu0f"},{"name":"VCS","_id":"ciwaantxs000cijnmwr9nrwsm"},{"name":"git","_id":"ciwaantxu000eijnmdbt9vye6"},{"name":"svn","_id":"ciwaantxv000fijnmtnxj7add"},{"name":"maven","_id":"ciwaantxv000gijnm1po2cdv2"},{"name":"java","_id":"ciwaantxx000jijnme5ytogj7"},{"name":"jvm","_id":"ciwaantxz000mijnmav4osoqx"},{"name":"pom","_id":"ciwaanty0000nijnm2xvjfs7s"}]}}